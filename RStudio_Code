> install.packages('tidyverse')
package ‘tidyverse’ successfully unpacked and MD5 sums checked

> install.packages("ggplot2")
package ‘ggplot2’ successfully unpacked and MD5 sums checked

> install.packages('GGally')
also installing the dependencies ‘labelled’, ‘broom.helpers’, ‘patchwork’, ‘ggstats’
package ‘labelled’ successfully unpacked and MD5 sums checked
package ‘broom.helpers’ successfully unpacked and MD5 sums checked
package ‘patchwork’ successfully unpacked and MD5 sums checked
package ‘ggstats’ successfully unpacked and MD5 sums checked
package ‘GGally’ successfully unpacked and MD5 sums checked

> training=read.csv('/Users/Humera Fiaz/Desktop/msc_training_dataset.csv')

> head(training)
  room bathroom kitchen french_door backyard furnished green_paint solar_power
1    3        1       2           1        1         0           1           0
2    5        2       2           2        1         0           0           0
3    5        2       2           2        1         0           0           0
4    1        2       1           2        0         0           0           0
5    2        1       2           3        1         1           0           0
6    5        1       2           1        0         0           1           0
  woodfloor qlm_security club_access price
1         0            1           1  6835
2         0            1           1  9005
3         0            1           1  9005
4         1            1           0  5105
5         1            1           0  9105
6         1            0           0  8995

> str(training)
'data.frame':	3000 obs. of  12 variables:
 $ room        : int  3 5 5 1 2 5 3 1 5 3 ...
 $ bathroom    : int  1 2 2 2 1 1 1 1 1 1 ...
 $ kitchen     : int  2 2 2 1 2 2 1 1 1 1 ...
 $ french_door : int  1 2 2 2 3 1 3 1 2 2 ...
 $ backyard    : int  1 1 1 0 1 0 1 0 0 0 ...
 $ furnished   : int  0 0 0 0 1 0 0 0 0 0 ...
 $ green_paint : int  1 0 0 0 0 1 0 0 0 0 ...
 $ solar_power : int  0 0 0 0 0 0 1 1 1 0 ...
 $ woodfloor   : int  0 0 0 1 1 1 0 0 1 1 ...
 $ qlm_security: int  1 1 1 1 1 0 0 1 0 0 ...
 $ club_access : int  1 1 1 0 0 0 0 1 0 0 ...
 $ price       : int  6835 9005 9005 5105 9105 8995 6805 4935 9895 6365 ...

> summary(training)
      room         bathroom        kitchen       french_door       backyard     
 Min.   :1.00   Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :0.0000  
 1st Qu.:2.00   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:0.0000  
 Median :3.00   Median :1.000   Median :2.000   Median :2.000   Median :0.0000  
 Mean   :2.99   Mean   :1.489   Mean   :1.522   Mean   :1.998   Mean   :0.4903  
 3rd Qu.:4.00   3rd Qu.:2.000   3rd Qu.:2.000   3rd Qu.:3.000   3rd Qu.:1.0000  
 Max.   :5.00   Max.   :2.000   Max.   :2.000   Max.   :3.000   Max.   :1.0000  
   furnished       green_paint     solar_power       woodfloor       qlm_security   
 Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :0.0000   Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  
 Mean   :0.4887   Mean   :0.485   Mean   :0.4957   Mean   :0.5123   Mean   :0.4807  
 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  
 Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
  club_access         price      
 Min.   :0.0000   Min.   : 2235  
 1st Qu.:0.0000   1st Qu.: 7005  
 Median :0.0000   Median : 8615  
 Mean   :0.4997   Mean   : 8607  
 3rd Qu.:1.0000   3rd Qu.:10215  
 Max.   :1.0000   Max.   :15035  

> NA_values=data.frame(no_of_na_values=colSums(is.na(training)))

> head(NA_values,21)
             no_of_na_values
room                       0
bathroom                   0
kitchen                    0
french_door                0
backyard                   0
furnished                  0
green_paint                0
solar_power                0
woodfloor                  0
qlm_security               0
club_access                0
price                      0

> library(GGally)
Loading required package: ggplot2
Registered S3 method overwritten by 'GGally':
  method from   
  +.gg   ggplot2


> ggpairs(training)
                                                                                    
> model <- lm(price ~ room + bathroom + kitchen + french_door + backyard + furnished + green_paint + solar_power + woodfloor + qlm_security + club_access, data = training)

> summary(model)

Call:
lm(formula = price ~ room + bathroom + kitchen + french_door + 
    backyard + furnished + green_paint + solar_power + woodfloor + 
    qlm_security + club_access, data = training)

Residuals:
       Min         1Q     Median         3Q        Max 
-4.361e-10 -6.000e-12 -1.800e-12  2.300e-12  5.534e-09 

Coefficients:
              Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  1.950e+02  1.130e-11 1.726e+13   <2e-16 ***
room         1.000e+03  1.307e-12 7.648e+14   <2e-16 ***
bathroom     3.000e+02  3.728e-12 8.047e+13   <2e-16 ***
kitchen      5.000e+02  3.728e-12 1.341e+14   <2e-16 ***
french_door  2.400e+02  2.291e-12 1.048e+14   <2e-16 ***
backyard     5.600e+02  3.723e-12 1.504e+14   <2e-16 ***
furnished    2.000e+03  3.725e-12 5.369e+14   <2e-16 ***
green_paint  3.700e+02  3.729e-12 9.923e+13   <2e-16 ***
solar_power  1.530e+03  3.724e-12 4.109e+14   <2e-16 ***
woodfloor    1.890e+03  3.724e-12 5.075e+14   <2e-16 ***
qlm_security 4.400e+02  3.730e-12 1.180e+14   <2e-16 ***
club_access  7.300e+02  3.726e-12 1.959e+14   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.019e-10 on 2988 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1 
F-statistic: 1.29e+29 on 11 and 2988 DF,  p-value: < 2.2e-16

> summary(model)$coefficient
             Estimate   Std. Error      t value Pr(>|t|)
(Intercept)       195 1.129964e-11 1.725719e+13        0
room             1000 1.307481e-12 7.648297e+14        0
bathroom          300 3.728260e-12 8.046649e+13        0
kitchen           500 3.728126e-12 1.341156e+14        0
french_door       240 2.290550e-12 1.047784e+14        0
backyard          560 3.722781e-12 1.504252e+14        0
furnished        2000 3.725397e-12 5.368555e+14        0
green_paint       370 3.728813e-12 9.922728e+13        0
solar_power      1530 3.723764e-12 4.108746e+14        0
woodfloor        1890 3.723899e-12 5.075326e+14        0
qlm_security      440 3.729529e-12 1.179774e+14        0
club_access       730 3.725997e-12 1.959207e+14        0

> coeffs <- coefficients(model)

> coeffsord <- coeffs[order(coeffs)]

> coeffsord
 (Intercept)  french_door     bathroom  green_paint qlm_security      kitchen 
         195          240          300          370          440          500 
    backyard  club_access         room  solar_power    woodfloor    furnished 
         560          730         1000         1530         1890         2000 

> barplot(coeffsord, col="#3F97D0", main="Regression Coefficients", las=2)

> testing=read.csv('/Users/Humera Fiaz/Desktop/msc_testing_dataset.csv')

> head(testing)
  room bathroom kitchen french_door backyard furnished green_paint solar_power
1    1        1       1           3        0         0           1           1
2    5        1       1           2        0         0           0           0
3    5        1       1           3        0         0           0           1
4    4        2       2           1        0         1           1           0
5    5        2       1           1        0         1           1           1
6    5        1       1           2        1         1           1           1
  woodfloor qlm_security club_access price
1         0            1           0  5068
2         0            1           1  7658
3         1            1           1 11318
4         0            1           0  8858
5         0            0           1 11178
6         0            1           0 11388

> str(testing)
'data.frame':	999 obs. of  12 variables:
 $ room        : int  1 5 5 4 5 5 5 2 2 1 ...
 $ bathroom    : int  1 1 1 2 2 1 1 1 1 1 ...
 $ kitchen     : int  1 1 1 2 1 1 2 2 1 1 ...
 $ french_door : int  3 2 3 1 1 2 3 1 3 3 ...
 $ backyard    : int  0 0 0 0 0 1 0 0 1 1 ...
 $ furnished   : int  0 0 0 1 1 1 0 1 1 0 ...
 $ green_paint : int  1 0 0 1 1 1 1 1 1 0 ...
 $ solar_power : int  1 0 1 0 1 1 1 0 0 0 ...
 $ woodfloor   : int  0 0 1 0 0 0 1 0 0 1 ...
 $ qlm_security: int  1 1 1 1 0 1 0 0 1 0 ...
 $ club_access : int  0 1 1 0 1 0 1 1 1 1 ...
 $ price       : int  5068 7658 11318 8858 11178 11388 11748 6848 7828 5908 ...

> prediction <- predict(model, newdata = testing )

> prediction
    1     2     3     4     5     6     7     8     9    10    11    12    13    14 
 5055  7645 11305  8845 11165 11375 11735  6835  7815  5895  9095  8295  6695 11305 
   15    16    17    18    19    20    21    22    23    24    25    26    27    28 
 7205  9165  8775 12745  9745  6655  9325  7785  7075  4315  9965  6855  7335  8895 
   29    30    31    32    33    34    35    36    37    38    39    40    41    42 
 6325  9695  6645 10305 10485  8195  7565 10355  9475 11115  9765 12825  6295  5125 
   43    44    45    46    47    48    49    50    51    52    53    54    55    56 
 9825  8895 11715  6205  4095 11475  9565  5535 11455 10395  4125  7735 13055  9595 
   57    58    59    60    61    62    63    64    65    66    67    68    69    70 
 6445  8365 10155  7835  8275 14305  7075  8435 12625  7095 11435 10555 10095  5535 
   71    72    73    74    75    76    77    78    79    80    81    82    83    84 
 8235 12095  4215  5865  9355  9245  7065 11625 10855 10825  8785  7355 11865  8315 
   85    86    87    88    89    90    91    92    93    94    95    96    97    98 
11805  5945  8775  8275  7165  8245  7575 11925 11965  7975  6645 10795 11235  8195 
   99   100   101   102   103   104   105   106   107   108   109   110   111   112 
 9355  7445  7235  8935  4575  9675  5735  5075 10645  9705  8605 12515  8165  6105 
  113   114   115   116   117   118   119   120   121   122   123   124   125   126 
 9175  6705  9265  9605  9925  7345  9215  7785  8395  7535  6565  8665 12195 10195 
  127   128   129   130   131   132   133   134   135   136   137   138   139   140 
10905  5785  5225  6095  3845  6235  9975  6465 11025  6565  4975 11695  8105  9135 
  141   142   143   144   145   146   147   148   149   150   151   152   153   154 
10605 10325  5505  7435  8895 11485  5995  7265  5185 10695 13005  9735 10425 11185 
  155   156   157   158   159   160   161   162   163   164   165   166   167   168 
 8295 11925  7745  8005 10355 10035 11995  8665 10825  6935  9425  9695 12285  7405 
  169   170   171   172   173   174   175   176   177   178   179   180   181   182 
11715  5595  9305  8145 10905  5655  6645  7815  8195  9665  7865 10445 11795  8305 
  183   184   185   186   187   188   189   190   191   192   193   194   195   196 
 8885  8325  5175  9645  8895  8645 10135  7705  5865  8405  5345  6275  7275  7345 
  197   198   199   200   201   202   203   204   205   206   207   208   209   210 
11795  9905  5715 11345  9535  7525 12955  5345  7995  7885 10225  8365 10165 11935 
  211   212   213   214   215   216   217   218   219   220   221   222   223   224 
10685  8895  8975  8135  9325 12165  9605  6965  6075  5475 12635  4105  5745  8745 
  225   226   227   228   229   230   231   232   233   234   235   236   237   238 
 8835  6165  7845  6545  7785  4705 12865  7995  7435  9195  6135 13685  9045 10355 
  239   240   241   242   243   244   245   246   247   248   249   250   251   252 
 8835  6835  5535  8005  7405  8785  8765 11625  9135 10875 11295  7765  9105  8315 
  253   254   255   256   257   258   259   260   261   262   263   264   265   266 
 6675  5575  7395  6805  9625  8055  6035  6665 11205  9945  5275  8965 11305  6985 
  267   268   269   270   271   272   273   274   275   276   277   278   279   280 
 7305 10705  7745 11145 11795  5455  6415  9515  8435  9545  8805  4205 10605  9005 
  281   282   283   284   285   286   287   288   289   290   291   292   293   294 
 2775  9705 12465 10445  4745 11055 11905  6465 10055  9375 10905  9195 11435  9475 
  295   296   297   298   299   300   301   302   303   304   305   306   307   308 
 9295 10105  9085  5385  8945 10495  8855 11325  8545  8095  6525  7065  9165 10395 
  309   310   311   312   313   314   315   316   317   318   319   320   321   322 
 8455 10705  9945 11615  7455  8965  8365  5865  8405  8445  9675  7705  8055  7405 
  323   324   325   326   327   328   329   330   331   332   333   334   335   336 
 9715  7555  9455  6295  9455  7475  8265  5905  7735  7755  8715  5595  8285  9675 
  337   338   339   340   341   342   343   344   345   346   347   348   349   350 
 7345 11175  7875  6575 10245  7785  4065 12385  8205 12695  9025 10145  6875  5865 
  351   352   353   354   355   356   357   358   359   360   361   362   363   364 
11655 11035  4235  7175 10195  6385  7225  9485 12495  8605  4835  6265  6545  8165 
  365   366   367   368   369   370   371   372   373   374   375   376   377   378 
 9495  8955  5535  5985  6895  8415 10175 11495  9425  9215  8425  7865  9355  4575 
  379   380   381   382   383   384   385   386   387   388   389   390   391   392 
 9105  4875  8335  7855  6855  8685  7065  5745  8545  9005  4565  3335  7695  5915 
  393   394   395   396   397   398   399   400   401   402   403   404   405   406 
 9945  7365  8055  7965  6375  6735  8595  7935  7995  7265  4795  9235  9215 10665 
  407   408   409   410   411   412   413   414   415   416   417   418   419   420 
10865  8145  7175  7045  8585  8965  5015  4845  8435 11655  7115 10345  5975 11625 
  421   422   423   424   425   426   427   428   429   430   431   432   433   434 
 8615 12565 11555  9245 10975 12135 11625  7905 10195 11305  8815  6865 13325  6795 
  435   436   437   438   439   440   441   442   443   444   445   446   447   448 
10015  7245 11295  6995  5885  8135  6905  5495  8395  7905  7805  8855 10965 12825 
  449   450   451   452   453   454   455   456   457   458   459   460   461   462 
 8245  6635  7635  9955  7545  8665  8145  7205  8865  6395  8135  8185  9775  9625 
  463   464   465   466   467   468   469   470   471   472   473   474   475   476 
 5145  5495  6845  9525  7915  7085  6425  7055  8295  9735  8615 11065  5625  8265 
  477   478   479   480   481   482   483   484   485   486   487   488   489   490 
 9365  6195  7535  9255  9485 10195  6815  8085  7555  9525  5315 11135  7325  8555 
  491   492   493   494   495   496   497   498   499   500   501   502   503   504 
10935  8555  7415  9585  5955  5735  9115  5405 10905  8265  9845 10615  8685  7005 
  505   506   507   508   509   510   511   512   513   514   515   516   517   518 
 8275  6945  8385  9175  9865  9235  8715 10335  8695  5875 10135  5675 12005  3605 
  519   520   521   522   523   524   525   526   527   528   529   530   531   532 
 4105  9695 12595 13805  6405 12705 12235  5935  8435  9055  8265  9675 11075  4165 
  533   534   535   536   537   538   539   540   541   542   543   544   545   546 
 7435  9405  9465  7905  5305  9055 10705  9875  6935 10835  7325 13055  6095 11825 
  547   548   549   550   551   552   553   554   555   556   557   558   559   560 
11895  7545  7535  5365  2675 13455 10215  7985  6815 12225  8565  7995 12065  9905 
  561   562   563   564   565   566   567   568   569   570   571   572   573   574 
 9285 10275  7485  9325  4305  5585 10905  6005  7555  4505  7905  5715 10105  8795 
  575   576   577   578   579   580   581   582   583   584   585   586   587   588 
11245  8605  8475  7645  6245  6915  8655 11795  7825  8815  9935  9205 11505  9675 
  589   590   591   592   593   594   595   596   597   598   599   600   601   602 
 9475 10035  9325  6675 10295  6395 10475  6865  8375  5885  7745  9855  9595 11845 
  603   604   605   606   607   608   609   610   611   612   613   614   615   616 
 7565  8365  3915  8875  8495  7455  9715 11255  2905  9405 12765  9905  6695  5715 
  617   618   619   620   621   622   623   624   625   626   627   628   629   630 
12105 12465  7005  8685  9215  8975  9735  7865  9295 10765  7845  8365  8705  6575 
  631   632   633   634   635   636   637   638   639   640   641   642   643   644 
11975  8865  8165  7765  7835  9425  7385  6595  5765  5805 10805 10335  7025 12065 
  645   646   647   648   649   650   651   652   653   654   655   656   657   658 
 8805  8055 11195  5645  9475  6345 12885  7675  9105 10475  6225  6975  6075  8105 
  659   660   661   662   663   664   665   666   667   668   669   670   671   672 
 9795  7075  3765  8205  8465  5585 10995  9055  7365  4975  6455 11235  8265 12105 
  673   674   675   676   677   678   679   680   681   682   683   684   685   686 
 7295  9735  9215  9635  4755  4595 11695  9145  8295 10245  8205 10465  3175  7635 
  687   688   689   690   691   692   693   694   695   696   697   698   699   700 
 9645  7415  6905  8745  9095 11025 11885  4855  7355 11625  8065  8965 10095  5115 
  701   702   703   704   705   706   707   708   709   710   711   712   713   714 
10815 11065  7225  8555  8095  6815  8475  9175  3945 10295 10395 12535  8735  4535 
  715   716   717   718   719   720   721   722   723   724   725   726   727   728 
10405  5135  9135  6805  8995  5075  8975  6105  9205  7435  5405  7965  8535  7935 
  729   730   731   732   733   734   735   736   737   738   739   740   741   742 
10885 10155 11755 10215  3415  9655 13055  8765  7765  9365  8205  9975 10605  8725 
  743   744   745   746   747   748   749   750   751   752   753   754   755   756 
 8525  3215  5175  7765  9055 11535  8205 11195 11655  6835  3635  9675 10305  9325 
  757   758   759   760   761   762   763   764   765   766   767   768   769   770 
 8195 10365  9735 10015 10215 11205 10735  5935 10075 11915  8675 13925  9775  5575 
  771   772   773   774   775   776   777   778   779   780   781   782   783   784 
11335 11065  9735  4445 12285  6955 10455 11475 11105  9425  8085 14005  7645 10345 
  785   786   787   788   789   790   791   792   793   794   795   796   797   798 
 7125  8165  7295  7205  9065  9875  6765  7735 10415  9555  6145  6315 14235  9145 
  799   800   801   802   803   804   805   806   807   808   809   810   811   812 
 8485  8885  8385  6395  5595  5625  9175  7975  8355 10405  8995 11605  5715  7115 
  813   814   815   816   817   818   819   820   821   822   823   824   825   826 
 8735  7005  6345 12245  5875 11255 10465  8285 11735 11415 11665  9135 10165  7055 
  827   828   829   830   831   832   833   834   835   836   837   838   839   840 
 8525  7845  6835 12225  7385 10005  7345  3405  9645  7745  8265  9495  6145 10245 
  841   842   843   844   845   846   847   848   849   850   851   852   853   854 
 6805 10965 11115  6435 11965 10045  5175  9535  7325  4805 12065  8265  8875 11225 
  855   856   857   858   859   860   861   862   863   864   865   866   867   868 
 8535  9645  9275  5665  7315  6015  7965  5625 12145  9035 13445  5715  6005  5365 
  869   870   871   872   873   874   875   876   877   878   879   880   881   882 
 3405 10175  8565 11235  4625  6025  7365  6625  9665 11415  7855  5705  7555  9675 
  883   884   885   886   887   888   889   890   891   892   893   894   895   896 
 5475  6455  8085  9595  8395  6975  6795 10285 11445  5155  8675 12825  3475 10685 
  897   898   899   900   901   902   903   904   905   906   907   908   909   910 
11705  8295  7275  9435 10125  6605  9805 11505  7575  7925 10005  9225  4375  8105 
  911   912   913   914   915   916   917   918   919   920   921   922   923   924 
12705  4415  7575 10235  7605 10665  9555  6905  7045  4995  8075  9265  8755  8165 
  925   926   927   928   929   930   931   932   933   934   935   936   937   938 
13435  7765  9135  8795  5905  9545  8555  8925  9805  7165  9875  9765  5075 11495 
  939   940   941   942   943   944   945   946   947   948   949   950   951   952 
 5735  6895 11215 12695 13445 12455  8765  7435  9805 10795  7865 13995  8115  8595 
  953   954   955   956   957   958   959   960   961   962   963   964   965   966 
10805 11395  5415  5345  9855  6895 11055 12835  8725  7355  5585  8215 13825  9115 
  967   968   969   970   971   972   973   974   975   976   977   978   979   980 
 9875  5705  6165 10455 13175 12115  9655  9565  8765  8725 11435  8085  6425  5005 
  981   982   983   984   985   986   987   988   989   990   991   992   993   994 
12465 10535  8335  5025  9555  5455  2735  7605 10845  6655 10055 11765  9775  5475 
  995   996   997   998   999 
10075  9775  9375  8515  6105 

> mse<-mean((testing$price-prediction)^2)

> print(mse)
[1] 169

> sigma(model)/mean(testing$price)
[1] 1.184427e-14

> testing$predicted<-predict(model, newdata = testing)

> actuals_preds <-data.frame(testing$price, testing$predicted)

> names(actuals_preds)<-c("Price","Predicted")

> correlation_accuracy<-cor(actuals_preds)

> correlation_accuracy
          Price Predicted
Price         1         1
Predicted     1         1

> head(actuals_preds)
  Price Predicted
1  5068      5055
2  7658      7645
3 11318     11305
4  8858      8845
5 11178     11165
6 11388     11375

> plot(prediction, testing$price, xlab="Predicted Price", ylab= "Actual Price", col="blue")
